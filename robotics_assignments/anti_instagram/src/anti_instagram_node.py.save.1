#!/usr/bin/env python
import cv2
import rospy
import threading
import numpy as np
from anti_instagram import AntiInstagram
from cv_bridge import CvBridge
from duckietown_utils.jpg import bgr_from_jpg
from sensor_msgs.msg import CompressedImage
from sensor_msgs.msg import Image
class AntiInstagramNode():
    def __init__(self):
        self.node_name = rospy.get_name()
        self.image_lock = threading.Lock()

        self.ai = AntiInstagram()

        # XXX: read parameters
        # XXX: parameters need to go inside config file, ask aleks about heirarchy 
        self.interval = self.setup_parameter("~ai_interval", 10)
        self.color_balance_percentage = self.setup_parameter("~cb_percentage", 0.8) # XXX: change in all launch files
        self.output_scale = self.setup_parameter("~scale_percent", 0.4) # XXX: change in all launch files 
        self.calculation_scale = self.setup_parameter("~resize", 0.2)

        self.bridge = CvBridge()

        self.image = None

        rospy.Timer(rospy.Duration(self.interval), self.calculate_new_parameters)
        
        self.uncorrected_image_subscriber = rospy.Subscriber(
                                                '~uncorrected_image/compressed', 
                                                CompressedImage, 
                                                self.process_image,
                                                buff_size=921600, 
                                                queue_size=1)

        self.corrected_image_publisher = rospy.Publisher(
                                             "~corrected_image/compressed", 
                                             CompressedImage, 
                                             queue_size=1)
        

    def process_image(self, image_msg):        
        try:
            self.image_lock.acquire()
            image = bgr_from_jpg(image_msg.data)
            self.image = image
            self.image_lock.release()
        except ValueError as e:
            rospy.loginfo('Anti_instagram cannot decode image: %s' % e)
            self.image_lock.release()
            return

        color_balanced_image = self.ai.apply_color_balance(image, 
                                   self.output_scale)
        if color_balanced_image is None:
            self.calculate_new_parameters(None)
            return
        #Custom code starts here
        cv_img = cv2.cvtColor(color_balanced_image,cv2.COLOR_BGR2GRAY)
        cv_img3=cv_img
        #cv_img1= self.bridge.imgmsg_to_cv2(data, "bgr8")
        cv_img1= color_balanced_image
        cv_img2=color_balanced_image
        #cv_img2= self.bridge.imgmsg_to_cv2(data, "bgr8")
        height, width = cv_img.shape
        ret, thresh = cv2.threshold(cv_img, 100,255,0)
        _, contours, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        mask = np.zeros(cv_img1.shape,np.uint8)
        mask2 = np.zeros(cv_img1.shape,np.uint8)
        #rospy.logerr(contours.shape)
        f=0
        cnt=[[[0,0]]]
        for c in contours:
            area = cv2.contourArea(c)
            if area<50 and f==0:
              f=1
              #rospy.logerr(c)
             # cv2.drawContours(mask,[c],0,(255,255,255),-1)
              cnt=c
            elif area<50:
              cv2.drawContours(mask,[c],0,(255,255,255),-1)
              cnt=np.append(cnt,c,axis=0)  
        cnt2=np.concatenate(cnt)
        rospy.logerr(cnt)
        #ret, thresh = cv2.threshold(mask, 100,255,0)
        #_, cnt2, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        (x,y),radius=cv2.minEnclosingCircle(cnt2)
        center=(int(x),int(y))
        radius=int(radius)
        #output=cv2.circle(mask2,center,radius,(255,255,255),-1)
        #mask_inv=cv2.bitwise_not(mask)
        #mask_final = np.where((mask<200),0,1).astype('uint8')

                
        dst = cv2.addWeighted(color_balanced_image,0.7,mask,0.3,0)
        # mask = cv2.bitwise_not(mask)
#        cv_img3=cv2.bitwise_or(color_balanced_image,redmask)
        #final = cv2.bitwise_or(cv_img3,mask)
        #cv_final = cv2.cvtColor(cv_img, cv2.COLOR_GRAY2BGR)
        #resoutput = self.bridge.cv2_to_imgmsg(cv_img3, "bgr8")
        #Custom code ends here
        corrected_image = self.bridge.cv2_to_compressed_imgmsg(dst)
        corrected_image.header.stamp = image_msg.header.stamp           
        self.corrected_image_publisher.publish(corrected_image)        
        

    def calculate_new_parameters(self, event):
        self.image_lock.acquire()
        image = self.image
        self.image_lock.release()

        if image is None:
            rospy.loginfo("[%s] Waiting for first image!" % self.node_name)
            return

        self.ai.calculate_color_balance_thresholds(image, 
            self.calculation_scale,
            self.color_balance_percentage)
        
        rospy.loginfo("[%s] New parameters computed" % self.node_name)
        
        


    def setup_parameter(self, param_name, default_value):
        value = rospy.get_param(param_name, default_value)
        rospy.set_param(param_name, value)
        rospy.loginfo("[%s] %s = %s " % (self.node_name, param_name, value))
        return value

   
   def noisy(noise_typ,image):
   if noise_typ == "gauss":
      row,col,ch= image.shape
      mean = 0
      var = 0.1
      sigma = var**0.5
      gauss = np.random.normal(mean,sigma,(row,col,ch))
      gauss = gauss.reshape(row,col,ch)
      noisy = image + gauss
      return noisy
   elif noise_typ == "s&p":
      row,col,ch = image.shape
      s_vs_p = 0.5
      amount = 0.004
      out = np.copy(image)
      # Salt mode
      num_salt = np.ceil(amount * image.size * s_vs_p)
      coords = [np.random.randint(0, i - 1, int(num_salt))
              for i in image.shape]
      out[coords] = 1

      # Pepper mode
      num_pepper = np.ceil(amount* image.size * (1. - s_vs_p))
      coords = [np.random.randint(0, i - 1, int(num_pepper))
              for i in image.shape]
      out[coords] = 0
      return out
  elif noise_typ == "poisson":
      vals = len(np.unique(image))
      vals = 2 ** np.ceil(np.log2(vals))
      noisy = np.random.poisson(image * vals) / float(vals)
      return noisy
  elif noise_typ =="speckle":
      row,col,ch = image.shape
      gauss = np.random.randn(row,col,ch)
      gauss = gauss.reshape(row,col,ch)        
      noisy = image + image * gauss
      return noisy




if __name__ == '__main__':
    rospy.init_node('anti_instagram_node', anonymous=False)
    node = AntiInstagramNode()
    rospy.spin()
